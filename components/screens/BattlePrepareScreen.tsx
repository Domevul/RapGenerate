"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { TutorialModal } from "@/components/ui/tutorial-modal";
import { useGameStore } from "@/lib/store";
import { GAME_CONFIG } from "@/lib/constants";
import { TUTORIAL_LEVEL1_RECOMMENDED, TUTORIAL_LEVEL2_RECOMMENDED } from "@/lib/tutorial-data";
import { cn } from "@/lib/utils";
import { RemainingDeckDisplay } from "@/components/ui/remaining-deck-display";
import { calculateCardAnnotations } from "@/lib/game-logic";
import type { SelectedTurnCollocations, RhymingGroup } from "@/lib/types";

export function BattlePrepareScreen() {
  const remainingCollocations = useGameStore(
    (state) => state.remainingCollocations
  );
  const selectedTurnCollocations = useGameStore(
    (state) => state.selectedTurnCollocations
  );
  const selectCollocationForSlot = useGameStore(
    (state) => state.selectCollocationForSlot
  );
  const clearSlot = useGameStore((state) => state.clearSlot);
  const canProceedToAttack = useGameStore((state) => state.canProceedToAttack);
  const proceedToAttack = useGameStore((state) => state.proceedToAttack);
  const currentTurn = useGameStore((state) => state.currentTurn);
  const currentEnemyTurnInfo = useGameStore(
    (state) => state.currentEnemyTurnInfo
  );
  const uiSupport = useGameStore((state) => state.uiSupport);
  const tutorialState = useGameStore((state) => state.tutorialState);
  const setError = useGameStore((state) => state.setError);

  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„É¨„Éô„É´„Å´Âøú„Åò„ÅüÂà∂ÈôêÊôÇÈñì„ÇíÈÅ©Áî®
  const getTimeLimit = () => {
    if (tutorialState.isActive) {
      const restriction = tutorialState.restrictions[tutorialState.currentLevel];
      if (restriction.timeLimit) {
        return restriction.timeLimit / 1000; // „Éü„É™Áßí‚ÜíÁßí
      }
    }
    return GAME_CONFIG.PREPARE_PHASE_DURATION / 1000;
  };

  const [timeLeft, setTimeLeft] = useState(getTimeLimit());
  const [selectedSlot, setSelectedSlot] =
    useState<keyof SelectedTurnCollocations | null>(null);
  const [showTutorialHint, setShowTutorialHint] = useState(false);
  const [tutorialSlotStep, setTutorialSlotStep] = useState<number>(0);

  // „É™„ÇΩ„Éº„Çπ‰∏çË∂≥„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    if (remainingCollocations.all.length < GAME_CONFIG.TURN_COLLOCATIONS_COUNT) {
      console.error(
        `„É™„ÇΩ„Éº„Çπ‰∏çË∂≥: ÊÆã„Çä${remainingCollocations.all.length}ÂÄãÔºàÂøÖË¶Å: ${GAME_CONFIG.TURN_COLLOCATIONS_COUNT}ÂÄãÔºâ`
      );
      // „Ç®„É©„ÉºÁîªÈù¢„Å∏„ÅÆÈÅ∑Áßª
      setError("resource-depleted");
    }
  }, [remainingCollocations, setError]);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        const newTime = prev - 1;
        if (newTime <= 0) {
          // „Çø„Ç§„É†„Ç¢„ÉÉ„ÉóÊôÇ„Å´Ëá™ÂãïÈÅ∑Áßª
          if (canProceedToAttack()) {
            proceedToAttack();
          }
          return 0;
        }
        return newTime;
      });
    }, 1000);

    return () => clearInterval(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const slots: (keyof SelectedTurnCollocations)[] = [
    "slot1",
    "slot2",
    "slot3",
    "slot4",
  ];

  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„É¢„Éº„Éâ: ÊúÄÂàù„ÅÆ„Éí„É≥„ÉàË°®Á§∫
  useEffect(() => {
    if (
      tutorialState.isActive &&
      tutorialState.currentLevel === 1 &&
      !showTutorialHint
    ) {
      setShowTutorialHint(true);
      setSelectedSlot("slot1"); // ÊúÄÂàù„ÅÆ„Çπ„É≠„ÉÉ„Éà„ÇíËá™ÂãïÈÅ∏Êäû
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tutorialState.isActive, tutorialState.currentLevel]);

  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„Éí„É≥„Éà„É°„ÉÉ„Çª„Éº„Ç∏Ôºà„É¨„Éô„É´„Åî„Å®„Å´Áï∞„Å™„ÇãÔºâ
  const getTutorialHintMessages = () => {
    if (tutorialState.currentLevel === 1) {
      return [
        "üí° „Åæ„ÅöÊúÄÂàù„ÅÆÊé¥„Åø„ÇíÈÅ∏„Åº„ÅÜ\n\nÂÖâ„Å£„Å¶„ÅÑ„Çã„Ç´„Éº„Éâ„Åå„Åä„Åô„Åô„ÇÅ„Å†„Çà!",
        "üí° Ê¨°„ÅØÁõ∏Êâã„Å∏„ÅÆËøî„Åó„ÇíÈÅ∏„Åº„ÅÜ\n\nÂêå„ÅòÈüªÔºàBÁ≥ªÔºâ„ÇíÈÅ∏„Å∂„Å®„ÉÅ„Çß„Éº„É≥„Å´„Å™„Çã„Çà!",
        "üí° „ÇÇ„ÅÜ‰∏ÄÊäº„Åó!\n\nÈüª„ÇíÁ∂ö„Åë„Å¶„Éú„Éº„Éä„Çπ„ÇíÁãô„Åä„ÅÜ!",
        "üí° ÊúÄÂæå„Å´Á∑†„ÇÅ„Çà„ÅÜ\n\n„Åì„Çå„Åß4ÊûöÈÅ∏ÊäûÂÆå‰∫Ü„Å†!",
      ];
    } else if (tutorialState.currentLevel === 2) {
      if (currentTurn === 1) {
        return [
          "üí° Êé¥„Åø„Åã„ÇâÂßã„ÇÅ„Çà„ÅÜ\n\n‰ªäÂõû„ÅØÈüª„ÅÆ„ÉÅ„Çß„Éº„É≥„ÇíÁãô„ÅÜ„Çà!",
          "üí° AÁ≥ª„ÅÆÈüª„ÇíÈÅ∏„Åº„ÅÜ\n\n„Äå„Äú„ÅÑ„Äç„ÅßÁµÇ„Çè„Çã„Ç´„Éº„Éâ„Å†!",
          "üí° „ÉÅ„Çß„Éº„É≥„ÇíÁ∂ö„Åë„Çà„ÅÜ!\n\nÂêå„ÅòAÁ≥ª„Åß„Éú„Éº„Éä„ÇπÂÄçÁéá„Ç¢„ÉÉ„Éó!",
          "üí° Á∑†„ÇÅ„ÅÆ„Ç´„Éº„Éâ„ÇíÈÅ∏„Åº„ÅÜ\n\n„ÉÅ„Çß„Éº„É≥„Éú„Éº„Éä„Çπ„ÅßÈ´òÂæóÁÇπ„Å†!",
        ];
      } else {
        return [
          "üí° 2„Çø„Éº„É≥ÁõÆÔºÅÊé¥„Åø„Åã„Çâ\n\n‰ªäÂ∫¶„ÅØ„Çø„Ç§„ÉóÁõ∏ÊÄß„ÇíËÄÉ„Åà„Çà„ÅÜ!",
          "üí° Áõ∏Êâã„ÅØ#Ëá™ÊÖ¢„Çø„Ç§„Éó\n\n#„Ç´„Ç¶„É≥„Çø„Éº„ÅßÂäπÊûúÁöÑ„Å´Ëøî„Åù„ÅÜ!",
          "üí° „Ç´„Ç¶„É≥„Çø„ÉºÁ≥ª„ÇíÁ∂ö„Åë„Çà„ÅÜ\n\n„Çø„Ç§„ÉóÁõ∏ÊÄß„ÅßÈ´òÂæóÁÇπ!",
          "üí° Á∑†„ÇÅ„Å¶ÂãùÂà©„ÇíÊé¥„ÇÅ!\n\nÊà¶Áï•ÁöÑ„Å™ÈÅ∏Êäû„ÅåÈçµ„Å†!",
        ];
      }
    }
    return [];
  };

  const tutorialHintMessages = getTutorialHintMessages();

  const handleTutorialCardSelect = (slotIndex: number) => {
    if (slotIndex < 3) {
      // Ê¨°„ÅÆ„Çπ„É≠„ÉÉ„Éà„Å∏
      setTutorialSlotStep(slotIndex + 1);
      setSelectedSlot(slots[slotIndex + 1]);
      setShowTutorialHint(true);
    } else {
      // ÂÖ®„Çπ„É≠„ÉÉ„ÉàÈÅ∏ÊäûÂÆå‰∫Ü
      setShowTutorialHint(false);
    }
  };

  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„É¢„Éº„Éâ: „Ç´„Éº„ÉâÈÅ∏ÊäûÊôÇ„ÅÆÂá¶ÁêÜ
  const handleCollocationSelect = (
    slot: keyof SelectedTurnCollocations,
    collocation: any
  ) => {
    selectCollocationForSlot(slot, collocation);

    if (tutorialState.isActive && tutorialState.currentLevel === 1) {
      const slotIndex = slots.indexOf(slot);
      handleTutorialCardSelect(slotIndex);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-900 via-black to-black p-4">
      <div className="max-w-6xl mx-auto space-y-4">
        <Card className="bg-black/80 border-cyan-500 border-2">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle className="text-2xl text-cyan-400">
                Ê∫ñÂÇô„Éï„Çß„Éº„Ç∫ - „Çø„Éº„É≥ {currentTurn}
              </CardTitle>
              <div className="text-3xl font-bold text-magenta-400">
                {timeLeft}Áßí
              </div>
            </div>
          </CardHeader>
        </Card>

        <div className="grid grid-cols-4 gap-4">
          {slots.map((slot, index) => {
            const collocation = selectedTurnCollocations[slot];
            return (
              <Card
                key={slot}
                className={cn(
                  "cursor-pointer",
                  selectedSlot === slot
                    ? "bg-cyan-900/50 border-cyan-400 border-2"
                    : "bg-black/80 border-gray-600",
                  collocation && "border-magenta-400"
                )}
                onClick={() => setSelectedSlot(slot)}
              >
                <CardContent className="p-4 min-h-[100px] flex flex-col justify-center">
                  <p className="text-sm text-gray-400 mb-2">„Çπ„É≠„ÉÉ„Éà {index + 1}</p>
                  {collocation ? (
                    <>
                      <p className="text-white text-sm">{collocation.text}</p>
                      <Button
                        variant="outline"
                        size="sm"
                        className="mt-2"
                        onClick={(e) => {
                          e.stopPropagation();
                          clearSlot(slot);
                        }}
                      >
                        „ÇØ„É™„Ç¢
                      </Button>
                    </>
                  ) : (
                    <p className="text-gray-500 text-sm">Êú™ÈÅ∏Êäû</p>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Card className="bg-black/80 border-gray-600">
          <CardHeader>
            <CardTitle className="text-lg text-white">
              ÊÆã„Çä„ÅÆ„Ç≥„É≠„Ç±„Éº„Ç∑„Éß„É≥
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-[400px] overflow-y-auto">
              {remainingCollocations.all.map((collocation) => {
                // „Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥Ë®àÁÆó
                const annotations =
                  uiSupport.chainPredictionEnabled ||
                  uiSupport.typeMatchingEnabled
                    ? calculateCardAnnotations(collocation, {
                        selectedCollocations: Object.values(
                          selectedTurnCollocations
                        ),
                        enemyType: currentEnemyTurnInfo?.type,
                        remainingByRhyming: {
                          A: remainingCollocations.byRhyming.A.length,
                          B: remainingCollocations.byRhyming.B.length,
                          C: remainingCollocations.byRhyming.C.length,
                          D: remainingCollocations.byRhyming.D.length,
                          "-": 0,
                        },
                      })
                    : [];

                // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„É¢„Éº„Éâ: Êé®Â•®„Ç´„Éº„Éâ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                const isRecommended = (() => {
                  if (!tutorialState.isActive || !selectedSlot) return false;

                  if (tutorialState.currentLevel === 1) {
                    return Object.entries(TUTORIAL_LEVEL1_RECOMMENDED).some(
                      ([slot, id]) => slot === selectedSlot && id === collocation.id
                    );
                  } else if (tutorialState.currentLevel === 2) {
                    const turnKey = currentTurn === 1 ? 'turn1' : 'turn2';
                    const recommended = TUTORIAL_LEVEL2_RECOMMENDED[turnKey];
                    return Object.entries(recommended).some(
                      ([slot, id]) => slot === selectedSlot && id === collocation.id
                    );
                  }

                  return false;
                })();

                return (
                  <Card
                    key={collocation.id}
                    className={cn(
                      "cursor-pointer bg-gray-900 border-gray-700 hover:border-cyan-400 transition-all",
                      isRecommended &&
                        "border-[#FFD700] border-4 animate-pulse shadow-[0_0_20px_#FFD700]"
                    )}
                    onClick={() => {
                      if (selectedSlot) {
                        handleCollocationSelect(selectedSlot, collocation);
                      }
                    }}
                  >
                    <CardContent className="p-3">
                      {isRecommended && (
                        <div className="mb-2 text-[#FFD700] font-bold text-sm flex items-center gap-1">
                          ‚≠ê „Åä„Åô„Åô„ÇÅ!
                        </div>
                      )}
                      <p className="text-white text-sm">{collocation.text}</p>
                      <div className="flex gap-1 mt-2">
                        <span className="text-xs px-1 py-0.5 rounded bg-magenta-900/50 text-magenta-300">
                          {collocation.type}
                        </span>
                        <span className="text-xs px-1 py-0.5 rounded bg-cyan-900/50 text-cyan-300">
                          {collocation.rhyming}
                        </span>
                      </div>

                      {/* „Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥Ë°®Á§∫ */}
                      {annotations.length > 0 && (
                        <div className="mt-2 space-y-1">
                          {annotations.map((annotation, index) => (
                            <div
                              key={index}
                              className={cn(
                                "text-xs px-2 py-1 rounded",
                                annotation.type === "chain" &&
                                  "bg-orange-900/50 text-orange-300",
                                annotation.type === "typeMatch" &&
                                  "bg-cyan-900/50 text-cyan-300",
                                annotation.type === "warning" &&
                                  "bg-yellow-900/50 text-yellow-300"
                              )}
                            >
                              <div className="flex items-center gap-1">
                                <span>{annotation.icon}</span>
                                <span>{annotation.text}</span>
                              </div>
                              {annotation.subtext && (
                                <div className="text-xs opacity-80 mt-0.5">
                                  {annotation.subtext}
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </CardContent>
        </Card>

        <Button
          variant="neon"
          size="lg"
          onClick={proceedToAttack}
          disabled={!canProceedToAttack()}
          className="w-full"
        >
          ÊîªÊíÉ„Éï„Çß„Éº„Ç∫„Å∏
        </Button>
      </div>

      {/* ÊÆã„Çä„Éá„ÉÉ„Ç≠Ë°®Á§∫ */}
      <RemainingDeckDisplay />

      {/* „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„Éí„É≥„Éà„É¢„Éº„ÉÄ„É´ */}
      <TutorialModal
        show={showTutorialHint}
        title={`„Çπ„É≠„ÉÉ„Éà${tutorialSlotStep + 1}„ÇíÈÅ∏„Åº„ÅÜ`}
        message={tutorialHintMessages[tutorialSlotStep]}
        onNext={() => setShowTutorialHint(false)}
        nextButtonText="„Çè„Åã„Å£„Åü"
      />
    </div>
  );
}
